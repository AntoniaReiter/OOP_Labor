

/ Classes--------------------------------------------------------------------------------------------------------

class AbstractBase
{
public:
    AbstractBase() { }
    virtual ~AbstractBase() = default; // this is (defaulted) virtual destructor
    virtual std::string toString() = 0;
};

class Derived : public AbstractBase
{
public:
    Derived() { }
    virtual std::string toString() override { return "Just an example " + std::to_string( _value ); }
private:
    int _value;
};


/ Vector Init-------------------------------------------------------------------------------------------------

std::vector<std::shared_ptr<AbstractBase>> v = { std::make_shared<Derived>() };


/ Vector Ausgabe mit der toString function

for (auto& i : v)
{
    std::cout << i->toString() << std::endl;
}





//Override of the << Binary --------------------------------------------------------------------------------------------

#include <iostream>

class Date
{
    int mo, da, yr;
public:
    Date(int m, int d, int y)
	: mo{m}, da{d}, yr{y};
    {}

    friend std::ostream& operator<<(std::ostream& os, const Date& dt);
};

std::ostream& operator<<(std::ostream& os, const Date& dt)
{
    os << dt.mo << '/' << dt.da << '/' << dt.yr;
    return os;
}

int main()
{
    Date dt(5, 6, 92);
    std::cout << dt;
}



// STD:TRANSFORM mit Lambdadadadada ------------------------------------------------------------------------

#include <algorithm>
#include <cctype>
#include <iostream>
#include <string>
#include <vector>
 
int main()
{
    std::string s("hello");
    std::transform(s.begin(), s.end(), s.begin(),
                   [](unsigned char c) -> unsigned char { return std::toupper(c); });
 
    std::vector<std::size_t> ordinals;
    std::transform(s.begin(), s.end(), std::back_inserter(ordinals),
                   [](unsigned char c) -> std::size_t { return c; });
 
    std::cout << s << ':';
    for (auto ord : ordinals) {
       std::cout << ' ' << ord;
    }
 
    std::transform(ordinals.cbegin(), ordinals.cend(), ordinals.cbegin(),
                   ordinals.begin(), std::plus<>{});
 
    std::cout << '\n';
    for (auto ord : ordinals) {
       std::cout << ord << ' ';
    }
    std::cout << '\n';
}





