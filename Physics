// Physics.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include "ARUnit.h"
#include "Distance.h"
#include "mmDistance.h"
#include <vector>

template <class T>

std::ostream& operator<<(std::ostream& out, ARUnit::UnitValue<T>& toOut) {
	return toOut.to_String();

}

int main()
{
	std::unique_ptr<ARUnit::UnitValue<T> >p1();
	vector<p1> container;


    std::cout << "Hello World!\n";
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file

//-----ARUnit.h
#pragma once
#include <string>

namespace ARUnit {

	template <class T>

	class UnitValue {
	private:
		T value;
		std::string unit;
		UnitValue();
		UnitValue(T v, std::string u) : value(v), unit(u) {};
		~UnitValue();
		
	};

	};



//----Distance
#pragma once
#include "ARUnit.h"
#include "IStringable.h"
#include <string>

template <class T>
class Distance :
	public ARUnit::UnitValue <T>, public IStringable
{
public:
	std::string to_String() {

		return "Distance: " + std::to_string(ARUnit::UnitValue.value) + " " + ARUnit::UnitValue.unit;
	}
	Distance(T d, std::string m = "m") : ARUnit::UnitValue <T>(value, unit) {};
	
};


//---- Istringable

#pragma once
#include <string>
class IStringable
{
	virtual std::string to_String() {

	}
};

//---- mmDistance.h
#pragma once
#include "Distance.h"
#include "IStringable.h"
#include "ARUnit.h"
#include <string>

template <class T>
class mmDistance :
	public Distance, public IStringable
{
public:
	std::string to_String() {
		
			return "mmDistance: " + std::to_string(ARUnit::UnitValue.value) + " " + ARUnit::UnitValue.unit;
	} 
	mmDistance();
	mmDistance(T d, std::string m = "m") : ARUnit::UnitValue <T>(value, unit) {};
	~ mmDistance ();
};


//--UnitValue.h
#pragma once
#include <string>

namespace ARUnit {

	template <class T>

	class UnitValue {
	private:
		T value;
		std::string unit;
	};

	};



